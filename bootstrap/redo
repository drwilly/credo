#!/bin/sh -e
# CREDO - An implementation of djb's redo
# Copyright (c) 2014  Wilke Schwiedop

log() {
	printf "${GREEN}redo%$(((REDO_DEPTH+1)*2))s${BOLD}%s${PLAIN}\\n" "" "$1" >&2
}

err() {
	printf "${RED}redo%$(((REDO_DEPTH+1)*2))s${BOLD}%s${PLAIN}\\n" "" "$1" >&2
}

timestamp() {
	date +%s || \
		printf %d\\n $((
		$(date -u +"((%Y-1600)*365+(%Y-1600)/4-(%Y-1600)/100+(%Y-1600)/400+%-j-135140)*86400+%-H*3600+%-M*60+%-S")
		))
}

find_dofile_pwd() {
	local dofile="$1.do"
	local ext
	shift

	if [ -e "$dofile" ]; then
		printf %s\\n "$dofile"
		return
	fi

	ext="$dofile"
	until [ "$ext" = "do" ]; do
		ext="${ext#*.}"

		for wildcard in _ default; do
			dofile="${wildcard}.$ext"
			if [ -e "$dofile" ]; then
				printf %s\\n "$dofile"
				return
			fi
		done
	done 
}

find_dofile() {
	local targetfile="$1"
	local dofile
	shift

	cd "${targetfile%/*}"
	until [ "$PWD" = "/" ]; do
		dofile="$(find_dofile_pwd ${targetfile##*/})"
		if [ -n "$dofile" ]; then
			printf %s/%s\\n "$PWD" "$dofile"
			return
		fi
		cd ..
	done
}

run_dofile() {
	local dofile="$1"
	local line1
	shift

	read line1 < $dofile
	if [ "$line1" != "${line1#\#!}" ]; then
		${line1#\#!} "$dofile" "$1" "$2" "$3"
	else
		( . "$dofile" )
	fi
}

if [ ${REDO_DEPTH:=0} -eq 0 ]; then
	# if no target is given on the command line
	# default to target "all"
	[ $# -eq 0 ] && set -- all 

	if [ -t 2 ] && [ "$TERM" != "dumb" ]; then
		export GREEN='\033[32m'
		export RED='\033[31m'
		export BOLD='\033[1m'
		export PLAIN='\033[m'
	fi

	export REDO_TIMESTAMP=$(timestamp)

	export PATH="$(dirname $(readlink --canonicalize $0)):$PATH"
fi

for target; do
	if [ -e "$target" ] && [ "$(stat --format %Y $target)" -ge $REDO_TIMESTAMP ]; then
		# target has been modified during this redo run
		continue
	fi

	if [ "$target" != "${target#/}" ]; then
		targetfile="$target"
	else
		targetfile="$PWD/$target"
	fi
	dofile="$(find_dofile $targetfile)"
	
	if [ -z "$dofile" ]; then
		# no dofile to build target
		if [ -e "$target" ] && [ "${0##*/}" = "redo-ifchange" ]; then
			# target exists -> assume target is a source file
			continue
		else
			err "No rule to make target '$target'. Stop."
			exit 2
		fi
	fi

	log "${dofile##*/}:$target"

	basename="${target##*/}"
	if [ "${dofile##*/}" = "${basename}.do" ]; then
		basename="${basename%.*}"
	else
		ext="${dofile##*/}"
		ext="${ext#*.}"
		ext="${ext%.do}"
		basename="${basename%.$ext}"
		unset ext
	fi
	tmpfile="${targetfile}.part"

	(
	export REDO_DEPTH=$((REDO_DEPTH + 1))

	cd "${dofile%/*}"

	# targetfile relative to dofile
	targetfile="${targetfile#$PWD/}"

	set -o noclobber
	# if this fails some other process is working on this target already.
	if ! echo -n "" 2> /dev/null > "$tmpfile"; then
		# wait and exit with success
		while [ -e "$tmpfile" ]; do
			sleep 1
		done
		exit 0
	else
		# ------------- HUP INT QUIT TERM
		trap "exit 1"   1   2   3    15
		trap "rm -f -- '$tmpfile'" 0 # EXIT
	fi

	if run_dofile "$dofile" "$targetfile" "$basename" "$tmpfile" >| "$tmpfile"; then
		# some targets such as 'all' or 'clean' do not produce output
		if [ -s "$tmpfile" ]; then
			mv "$tmpfile" "$targetfile"
		fi
	else
		rc=$?
		err "${dofile##*/} returned $rc"
		exit $rc
	fi
	)
done
